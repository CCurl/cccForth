// Conway's game of life

load init.c4

variable (r) 100 (r) !
variable (c) 300 (c) !
: rows (r) @ ; : cols (c) @ ;
: pop-sz rows 2 + cols 2 + * ;

variable pop pop-sz allot
variable bak pop-sz allot
variable ln cols allot

: T5 ( a -- b ) dup c@ 1+ over c! 1+ ;
: b++ ( -- )
    r4 1- cols - T5 T5 T5 drop
    r4 1-        T5 1+ T5 drop
    r4 1- cols + T5 T5 T5 drop ;

: alive? ( a b -- c )
    dup 2 = .if drop exit .then
    3 = .if drop 1 exit .then
    drop 0 ;

: rand-pop pop-sz 0 DO rand $FF and #200 > i pop + c! LOOP ;
: clr-bak bak s1 pop-sz 0 DO 0 r1 c! i1 LOOP ;
: bak->pop bak s1 pop s2 pop-sz 0 DO 
        r2 c@ r1 c@ alive? r2 c! 
      0 r1 c! i1 i2
    LOOP ;

: ->p ( c r -- v ) cols * + pop + ;
: ->b ( c r -- v ) cols * + bak + ;

: .row cols 1+ 1 DO $20 I J ->p C@ .if DROP '*' .then r6 C! i6 LOOP ;
: .pop 1 dup ->XY rows 1+ 1 DO ln s6 .row 0 r6 C! ln QTYPE CR LOOP ;

: gen 1 1 ->b s4
    cols rows ->p 1 1 ->p
    DO i c@ IF b++ THEN i4 LOOP
    bak->pop .pop r7 . i7 ;

// 60 (r) ! 200 (c) !
40 (r) ! 150 (c) !
: T1 begin gen key? until key drop ;
: go 1 s7 clr-bak rand-pop CURSOR-OFF CLS T1 CURSOR-ON ;
